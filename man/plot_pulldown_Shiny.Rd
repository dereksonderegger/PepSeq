% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Pulldown_Visualization_Shiny.R
\name{plot_pulldown_Shiny}
\alias{plot_pulldown_Shiny}
\title{Create a Shiny application showing a scatterplot representing a pull-down}
\usage{
plot_pulldown_Shiny(input, height = 400, peaks = FALSE,
  peak_method = "PoT", peak_param = NA)
}
\arguments{
\item{input}{The input data frame  read in using the
`import_pulldown()` function.}

\item{height}{The height of the graph window (in pixels).}

\item{peaks}{A logical flag denoting if the peaks should be highlighted}

\item{peak_method}{Which method should be used for peak detection}

\item{peak_param}{A parameter which controls the peak finding method. For PoT, it is the threshold.}

\item{scales}{Contols if the y-scale should be 'fixed' across the rows or if the y-scales should be 'free'
to vary across the different rows.}
}
\description{
The pulldown script created by John Altin creates a .csv file
with several columns that gives the number of reads for various
peptide sequences. This function reads the .csv file and creates
a Shiny application that allows the user to explore the pulldown.
}
\details{
The input .csv file should have a columns denoting the protein name and location,
(by default we assume they are labeled `protein_ID` and `position`) and then
a bunch of response columns.  If the response column has a "XXX_cleaved" and
"XXX_uncleaved" pair, then we standardize the cleaved/uncleaved pair into a single
response.  If the column has no pair, then we don't do any standardization with it.
}
\examples{
file <- system.file("extdata", "example_counts.csv", package = "PepSeq")
plot_pulldown_Shiny(file, read_indicator='Y_')

}
